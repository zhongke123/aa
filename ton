package com.example.nettyproject.singleThreadManyFile;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.bytes.ByteArrayEncoder;
import io.netty.handler.codec.string.StringDecoder;
import io.netty.handler.codec.string.StringEncoder;
import io.netty.handler.ssl.SslContext;
import io.netty.handler.stream.ChunkedWriteHandler;

public final class EchoClient {

    static final String HOST = System.getProperty("host", "127.0.0.1");//发送的ip
    static final int PORT = Integer.parseInt(System.getProperty("port", "8007"));//端口
    static String directory = "F:\\zlj\\zlj\\sp\\微服务架构的分布式事务解决方案（Dubbo分布式事务处理）\\1 课程介绍.rar";//发送的文件夹

    public static void main(String[] args) throws Exception {
        EventLoopGroup group = new NioEventLoopGroup();
        try {
            Bootstrap b = new Bootstrap();
            b.group(group)
             .channel(NioSocketChannel.class)
             .option(ChannelOption.TCP_NODELAY, true)
             .option(ChannelOption.RCVBUF_ALLOCATOR, new FixedRecvByteBufAllocator(65535))//设置buffer缓冲区大小
                    .handler(new ChannelInitializer<SocketChannel>() {
                 @Override
                 public void initChannel(SocketChannel ch) throws Exception {
                     ChannelPipeline p = ch.pipeline();
                     p.addLast(
                    		 new ByteArrayEncoder(),//发送byte数组编码器
                    		 new ChunkedWriteHandler(),//用来处理发送流的类
                    		 new Encoder(),//自定义加密类
                             new StringEncoder(),
                    		 new EchoClientHandler(directory));//处理器
                 }
             });
            
            ChannelFuture f = b.connect(HOST, PORT).sync();
            f.channel().closeFuture().sync();
        } finally {
            group.shutdownGracefully();
        }
    }
}
